trigger: none # Manual trigger only

parameters:
  # Transfer settings
  - name: blockSize
    type: number
    default: 512    # Increased for large files
  - name: concurrency
    type: number
    default: 256    # Balanced for parallel processing
  - name: batchSize
    type: number
    default: 100000 # Increased batch size
  - name: retryAttempts
    type: number
    default: 3
  - name: retryDelay
    type: number
    default: 30
  - name: parallelTransfers
    type: number
    default: 3      # Number of parallel transfers for medium/small containers

  # Time filter
  - name: modifiedSince
    type: string
    default: '3months'
    values:
      - '7days'
      - '1month'
      - '3months'
      - '6months'
      - '1year'
      - 'all'

variables:
  SOURCE_ACCOUNT: QWERTY
  TARGET_ACCOUNT: ASDFG
  AZURE_STORAGE_AUTH_MODE: key
  AZURE_LOG_LEVEL: INFO
  AZCOPY_PRESERVE_PROPERTIES: true
  AZCOPY_CONCURRENCY_VALUE: 2000
  AZCOPY_BUFFER_GB: 2000
  AZCOPY_CONCURRENT_SCAN: 2000
  # Size thresholds in bytes
  LARGE_CONTAINER_THRESHOLD: 107374182400  # 100GB
  MEDIUM_CONTAINER_THRESHOLD: 10737418240  # 10GB

stages:
- stage: PreMigrationSetup
  jobs:
  - job: PrepareStorage
    timeoutInMinutes: 30
    pool:
      name: 'iac-devops-pool'
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
    steps:
    - task: AzureCLI@2
      name: ConfigureStorageNetworking
      inputs:
        azureSubscription: ASDFGSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Enable private endpoints for target storage
          az storage account update \
            --only-show-errors \
            --name ASDFG \
            --allow-shared-key-access true \
            --default-action Deny \
            --bypass AzureServices \
            --only-show-errors
          
          # Configure storage account for maximum throughput
          az storage account update \
            --only-show-errors \
            --name ASDFG \
            --routing-choice InternetRouting \
            --publish-internet-endpoints false \
            --publish-microsoft-endpoints true \
            --only-show-errors

- stage: MigrateStorage
  dependsOn: PreMigrationSetup
  jobs:
  - job: Migration
    timeoutInMinutes: 4320  # 72 hours
    pool:
      name: 'iac-devops-pool'
      demands:
        - Agent.OS -equals Linux
        - Agent.OSArchitecture -equals X64
    steps:
    - task: AzureCLI@2
      name: GenerateSourceSAS
      inputs:
        azureSubscription: QWERTYSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Calculate cutoff date
          if [ "${{ parameters.modifiedSince }}" != "all" ]; then
            case ${{ parameters.modifiedSince }} in
              "7days") cutoff_date=$(date -d "7 days ago" +%Y-%m-%d);;
              "1month") cutoff_date=$(date -d "1 month ago" +%Y-%m-%d);;
              "3months") cutoff_date=$(date -d "3 months ago" +%Y-%m-%d);;
              "6months") cutoff_date=$(date -d "6 months ago" +%Y-%m-%d);;
              "1year") cutoff_date=$(date -d "1 year ago" +%Y-%m-%d);;
            esac
            echo "##vso[task.setvariable variable=CUTOFF_DATE]$cutoff_date"
            echo "Migrating files modified since: $cutoff_date"
          else
            echo "Migrating all files"
          fi

          source_sas=$(az storage account generate-sas \
            --permissions rlf \
            --account-name QWERTY \
            --services bft \
            --resource-types sco \
            --expiry "$(date -u -d "7 days" '+%Y-%m-%dT%H:%MZ')" \
            --only-show-errors \
            -o tsv)
          
          echo "##vso[task.setvariable variable=SOURCE_SAS;]$source_sas"
          
          if ! az storage container list \
            --account-name QWERTY \
            --sas-token "$source_sas" \
            --only-show-errors; then
            echo "Error: Source SAS token verification failed"
            exit 1
          fi

    - task: AzureCLI@2
      name: GenerateTargetSAS
      inputs:
        azureSubscription: ASDFGSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          target_sas=$(az storage account generate-sas \
            --permissions rwdlacup \
            --account-name ASDFG \
            --services bft \
            --resource-types sco \
            --expiry "$(date -u -d "7 days" '+%Y-%m-%dT%H:%MZ')" \
            --only-show-errors \
            -o tsv)
          
          echo "##vso[task.setvariable variable=TARGET_SAS;]$target_sas"
          
          if ! az storage container create \
            --name "pipeline-check-container" \
            --account-name ASDFG \
            --sas-token "$target_sas" \
            --only-show-errors; then
            echo "Error: Target SAS token verification failed"
            exit 1
          fi
          
          az storage container delete \
            --name "pipeline-check-container" \
            --account-name ASDFG \
            --sas-token "$target_sas" \
            --only-show-errors

    - task: AzureCLI@2
      name: PrepareSourceData
      inputs:
        azureSubscription: QWERTYSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          mkdir -p migration_lists migration_logs
          
          # Initialize container classification files
          > migration_lists/large_containers.txt
          > migration_lists/medium_containers.txt
          > migration_lists/small_containers.txt
          
          # Get and classify containers by size
          echo "Analyzing containers and classifying by size..."
          az storage container list \
            --account-name QWERTY \
            --sas-token "$(SOURCE_SAS)" \
            --query "[].name" -o tsv | while read -r container; do
            
            size=$(az storage blob list \
              --container-name "$container" \
              --account-name QWERTY \
              --sas-token "$(SOURCE_SAS)" \
              --query "sum([].properties.contentLength)" -o tsv)
            
            if [ $size -gt $LARGE_CONTAINER_THRESHOLD ]; then
              echo "$container" >> migration_lists/large_containers.txt
              echo "Large container found: $container ($(($size / 1024 / 1024 / 1024))GB)"
            elif [ $size -gt $MEDIUM_CONTAINER_THRESHOLD ]; then
              echo "$container" >> migration_lists/medium_containers.txt
              echo "Medium container found: $container ($(($size / 1024 / 1024 / 1024))GB)"
            else
              echo "$container" >> migration_lists/small_containers.txt
              echo "Small container found: $container ($(($size / 1024 / 1024))MB)"
            fi
          done
          
          # Get file shares
          az storage share list \
            --account-name QWERTY \
            --sas-token "$(SOURCE_SAS)" \
            --query "[].name" -o tsv > migration_lists/shares.txt
          
          # Get tables
          az storage table list \
            --account-name QWERTY \
            --sas-token "$(SOURCE_SAS)" \
            --query "[].name" -o tsv > migration_lists/tables.txt
          
          # Summary
          echo "Classification complete:"
          echo "Large containers: $(wc -l < migration_lists/large_containers.txt)"
          echo "Medium containers: $(wc -l < migration_lists/medium_containers.txt)"
          echo "Small containers: $(wc -l < migration_lists/small_containers.txt)"
          echo "File shares: $(wc -l < migration_lists/shares.txt)"
          echo "Tables: $(wc -l < migration_lists/tables.txt)"

    - task: AzureCLI@2
      name: PerformMigration
      inputs:
        azureSubscription: QWERTYSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          summary_log="migration_logs/migration_summary.log"
          echo "Migration Summary - Started at $(date)" > $summary_log
          total_start_time=$(date +%s)
          
          # Function to perform single container migration
          migrate_container() {
            local container=$1
            local block_size=$2
            local cap_mbps=$3
            local container_start_time=$(date +%s)
            
            echo "Migrating container: $container (Block size: ${block_size}MB, Cap: ${cap_mbps}Mbps)"
            
            # Create container in target
            az storage container create \
              --name "$container" \
              --account-name ASDFG \
              --sas-token "$(TARGET_SAS)" \
              --only-show-errors
            
            # Perform migration
            azcopy copy \
              "https://QWERTY.blob.core.windows.net/${container}?$(SOURCE_SAS)" \
              "https://ASDFG.blob.core.windows.net/${container}?$(TARGET_SAS)" \
              --recursive \
              --block-size-mb=$block_size \
              --cap-mbps=$cap_mbps \
              --include-after "$(CUTOFF_DATE)" \
              --log-level=ERROR \
              --output-type=text
            
            local container_end_time=$(date +%s)
            local duration=$((container_end_time - container_start_time))
            echo "✓ Container $container completed in ${duration} seconds" >> $summary_log
            return 0
          }
          
          # Process large containers sequentially with maximum resources
          echo "=== Processing Large Containers ===" >> $summary_log
          if [ -s "migration_lists/large_containers.txt" ]; then
            while IFS= read -r container; do
              migrate_container "$container" 512 2000
            done < "migration_lists/large_containers.txt"
          fi
          
          # Process medium containers with parallel execution
          echo "=== Processing Medium Containers ===" >> $summary_log
          if [ -s "migration_lists/medium_containers.txt" ]; then
            current_parallel=0
            while IFS= read -r container; do
              if [ $current_parallel -ge ${{ parameters.parallelTransfers }} ]; then
                wait -n
                current_parallel=$((current_parallel - 1))
              fi
              migrate_container "$container" 256 1000 &
              current_parallel=$((current_parallel + 1))
            done < "migration_lists/medium_containers.txt"
            wait
          fi
          
          # Process small containers with maximum parallelism
          echo "=== Processing Small Containers ===" >> $summary_log
          if [ -s "migration_lists/small_containers.txt" ]; then
            current_parallel=0
            while IFS= read -r container; do
              if [ $current_parallel -ge $((${{ parameters.parallelTransfers }} * 2)) ]; then
                wait -n
                current_parallel=$((current_parallel - 1))
              fi
              migrate_container "$container" 128 500 &
              current_parallel=$((current_parallel + 1))
            done < "migration_lists/small_containers.txt"
            wait
          fi
          
          # Process file shares
          echo "=== Processing File Shares ===" >> $summary_log
          if [ -s "migration_lists/shares.txt" ]; then
            while IFS= read -r share; do
              share_start_time=$(date +%s)
              
              az storage share create \
                --name "$share" \
                --account-name ASDFG \
                --sas-token "$(TARGET_SAS)" \
                --only-show-errors
              
              azcopy copy \
                "https://QWERTY.file.core.windows.net/${share}?$(SOURCE_SAS)" \
                "https://ASDFG.file.core.windows.net/${share}?$(TARGET_SAS)" \
                --recursive \
                --block-size-mb=256 \
                --cap-mbps=1000 \
                --include-after "$(CUTOFF_DATE)" \
                --log-level=ERROR \
                --output-type=text &
              
              wait $!
              
              share_end_time=$(date +%s)
              duration=$((share_end_time - share_start_time))
              echo "✓ File share $share completed in ${duration} seconds" >> $summary_log
            done < "migration_lists/shares.txt"
          fi
          
          # Process tables
          echo "=== Processing Tables ===" >> $summary_log
          if [ -s "migration_lists/tables.txt" ]; then
            while IFS= read -r table; do
              table_start_time=$(date +%s)
              
              az storage table create \
                --name "$table" \
                --account-name ASDFG \
                --sas-token "$(TARGET_SAS)" \
                --only-show-errors
              
              azcopy copy \
                "https://QWERTY.table.core.windows.net/${table}?$(SOURCE_SAS)" \
                "https://ASDFG.table.core.windows.net/${table}?$(TARGET_SAS)" \
                --recursive \
                --block-size-mb=128 \
                --cap-mbps=500 \
                --log-level=ERROR \
                --output-type=text &
              
              wait $!
              
              table_end_time=$(date +%s)
              duration=$((table_end_time - table_start_time))
              echo "✓ Table $table completed in ${duration} seconds" >> $summary_log
            done < "migration_lists/tables.txt"
          fi
          
          # Calculate final summary
          total_end_time=$(date +%s)
          total_duration=$((total_end_time - total_start_time))
          echo -e "\n=== Final Migration Summary ===" >> $summary_log
          echo "Total migration time: ${total_duration} seconds" >> $summary_log
          echo "Migration completed at $(date)" >> $summary_log
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'migration_logs'
        artifactName: 'MigrationLogs'

    - task: AzureCLI@2
      name: ValidationTask
      inputs:
        azureSubscription: ASDFGSUB
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Starting validation process..."
          validation_log="migration_logs/validation_summary.log"
          echo "Validation Summary - Started at $(date)" > $validation_log
          
          # Function to verify container integrity
          verify_container() {
            local container=$1
            local source_account=$2
            local target_account=$3
            local retries=3
            local retry_count=0
            
            while [ $retry_count -lt $retries ]; do
              echo "Verifying container: $container (Attempt $((retry_count + 1)))"
              
              # Get source and target blob lists with properties
              source_count=$(az storage blob list \
                --container-name "$container" \
                --account-name "$source_account" \
                --sas-token "$(SOURCE_SAS)" \
                --query "length(@)" -o tsv)
                
              target_count=$(az storage blob list \
                --container-name "$container" \
                --account-name "$target_account" \
                --sas-token "$(TARGET_SAS)" \
                --query "length(@)" -o tsv)
              
              if [ "$source_count" -eq "$target_count" ]; then
                echo "✓ Container $container verified ($source_count blobs)" >> $validation_log
                return 0
              else
                echo "Mismatch in $container: Source=$source_count, Target=$target_count" >> $validation_log
                retry_count=$((retry_count + 1))
                sleep 30
              fi
            done
            
            echo "❌ Container $container validation failed after $retries attempts" >> $validation_log
            return 1
          }
          
          # Validate containers by size category
          failed_containers=()
          
          # Validate large containers
          echo "=== Validating Large Containers ===" >> $validation_log
          if [ -s "migration_lists/large_containers.txt" ]; then
            while IFS= read -r container; do
              if ! verify_container "$container" "QWERTY" "ASDFG"; then
                failed_containers+=("$container")
              fi
            done < "migration_lists/large_containers.txt"
          fi
          
          # Validate medium containers
          echo "=== Validating Medium Containers ===" >> $validation_log
          if [ -s "migration_lists/medium_containers.txt" ]; then
            while IFS= read -r container; do
              if ! verify_container "$container" "QWERTY" "ASDFG"; then
                failed_containers+=("$container")
              fi
            done < "migration_lists/medium_containers.txt"
          fi
          
          # Validate small containers
          echo "=== Validating Small Containers ===" >> $validation_log
          if [ -s "migration_lists/small_containers.txt" ]; then
            while IFS= read -r container; do
              if ! verify_container "$container" "QWERTY" "ASDFG"; then
                failed_containers+=("$container")
              fi
            done < "migration_lists/small_containers.txt"
          fi
          
          # Validate file shares
          echo "=== Validating File Shares ===" >> $validation_log
          if [ -s "migration_lists/shares.txt" ]; then
            while IFS= read -r share; do
              source_count=$(az storage file list \
                --share-name "$share" \
                --account-name "QWERTY" \
                --sas-token "$(SOURCE_SAS)" \
                --query "length(@)" -o tsv)
                
              target_count=$(az storage file list \
                --share-name "$share" \
                --account-name "ASDFG" \
                --sas-token "$(TARGET_SAS)" \
                --query "length(@)" -o tsv)
              
              if [ "$source_count" -eq "$target_count" ]; then
                echo "✓ Share $share verified ($source_count files)" >> $validation_log
              else
                echo "❌ Share $share validation failed (Source=$source_count, Target=$target_count)" >> $validation_log
                failed_containers+=("share:$share")
              fi
            done
          fi
          
          # Final validation summary
          echo -e "\n=== Validation Summary ===" >> $validation_log
          echo "Validation completed at $(date)" >> $validation_log
          echo "Total failed items: ${#failed_containers[@]}" >> $validation_log
          
          if [ ${#failed_containers[@]} -gt 0 ]; then
            echo "Failed items:" >> $validation_log
            printf '%s\n' "${failed_containers[@]}" >> $validation_log
            echo "##vso[task.logissue type=warning]${#failed_containers[@]} items failed validation"
          else
            echo "✓ All items validated successfully" >> $validation_log
          fi

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'validation_log'
        artifactName: 'ValidationLogs'

